name: Android (Buildozer) â†’ GitHub Release

on:
  push:
    branches: [ "main" ]           # Nightly builds from main
    tags:     [ "v*" ]             # Versioned releases when you push tags like v1.2.3
  workflow_dispatch:                # Manual run

permissions:
  contents: write                   # Required for creating/updating releases

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: "0"          # Defensive: avoid BuildKit quirks with pulls

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Optional: cache Buildozer/Gradle dirs across runs to speed up builds
      - name: Cache Buildozer & Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.buildozer
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            ${{ runner.os }}-buildozer-

      # Fail early if the spec isn't where we expect it (repo root by default)
      - name: Verify buildozer.spec is in repo root
        run: |
          if [ ! -f buildozer.spec ]; then
            echo "::error::buildozer.spec not found in repository root."
            echo "Contents of current directory:"
            ls -la
            exit 1
          fi

      # Build inside the GHCR Buildozer image; set workdir to the mount path
      # NOTE: The image entrypoint is 'buildozer', so pass only 'android debug'
      - name: Build APK (debug) with Buildozer in Docker (via GHCR)
        run: |
          sudo docker pull ghcr.io/kivy/buildozer:latest
          sudo docker run --rm \
            -e BUILDOZER_WARN_ON_ROOT=0 \
            -w /home/user/app \
            -v "$PWD":/home/user/app \
            -v "$HOME/.buildozer":/home/user/.buildozer \
            -v "$HOME/.gradle":/home/user/.gradle \
            ghcr.io/kivy/buildozer:latest \
            android debug

      - name: Locate APK
        id: apk
        run: |
          APK="$(ls -1t bin/*.apk 2>/dev/null | head -n1 || true)"
          if [ -z "$APK" ]; then
            echo "::error::No APK found in bin/. Build likely failed."
            echo "bin/ contents:"
            ls -la bin/ || true
            exit 1
          fi
          echo "apk_path=$APK" >> "$GITHUB_OUTPUT"
          echo "Found APK: $APK"

      # If this is a tag push (e.g., v1.2.3), create/update a standard release with that tag
      - name: Create/Upload versioned release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${GITHUB_REF##*/}"
          NAME="$TAG"
          NOTES="Automated release for $TAG"
          gh release view "$TAG" >/dev/null 2>&1 || gh release create "$TAG" -t "$NAME" -n "$NOTES"
          gh release upload "$TAG" "${{ steps.apk.outputs.apk_path }}" --clobber

      # Otherwise (push to main / manual run), publish/update a rolling "nightly" pre-release
      - name: Create/Upload nightly pre-release (on main)
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="nightly"
          TITLE="nightly"
          NOTES="Nightly build: $(date -u +'%Y-%m-%d %H:%M:%SZ')"
          gh release view "$TAG" >/dev/null 2>&1 || gh release create "$TAG" -p -t "$TITLE" -n "$NOTES"
          gh release upload "$TAG" "${{ steps.apk.outputs.apk_path }}" --clobber

      - name: Summary
        run: |
          echo "Uploaded APK: ${{ steps.apk.outputs.apk_path }}"